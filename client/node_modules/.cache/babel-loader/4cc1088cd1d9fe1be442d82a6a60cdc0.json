{"ast":null,"code":"import api from '../utils/api';\nimport history from '../utils/history';\nimport { USER_LOADED, USERAUTH_LOADED, USERS_LOADED, USER_UPDATED, USER_DELETED, USERS_ERROR, USER_CLEARED, USERS_CLEARED } from './types';\nimport { setAlert } from './alert';\nimport { updateLoadingSpinner } from './global';\nexport const loadUser = user_id => async dispatch => {\n  dispatch(updateLoadingSpinner(true));\n\n  try {\n    const res = await api.get(`/user/${user_id}`);\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch(setAlert(err.response.data.msg, 'danger', '1'));\n    dispatch({\n      type: USERS_ERROR,\n      payload: {\n        type: err.response.statusText,\n        status: err.response.status,\n        msg: err.response.data.msg\n      }\n    });\n  }\n\n  dispatch(updateLoadingSpinner(false));\n};\nexport const loadUsers = (filterData, search) => async dispatch => {\n  if (!search) dispatch(updateLoadingSpinner(true));\n  let filter = '';\n  const filternames = Object.keys(filterData);\n\n  for (let x = 0; x < filternames.length; x++) {\n    const name = filternames[x];\n\n    if (filterData[name] !== '') {\n      if (filter !== '') filter = filter + '&';\n      filter = filter + filternames[x] + '=' + filterData[name];\n    }\n  }\n\n  try {\n    const res = await api.get(`/user?${filter}`);\n    dispatch({\n      type: USERS_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    if (!search) dispatch(setAlert(err.response.data.msg, 'danger', '1'));\n    dispatch({\n      type: USERS_ERROR,\n      payload: {\n        type: err.response.statusText,\n        status: err.response.status,\n        msg: err.response.data.msg\n      }\n    });\n    window.scrollTo(0, 0);\n  }\n\n  if (!search) dispatch(updateLoadingSpinner(false));\n};\nexport const updateUser = (formData, user_id, self) => async dispatch => {\n  dispatch(updateLoadingSpinner(true));\n\n  try {\n    const res = await api.put(`/user/${user_id}`, formData);\n    dispatch({\n      type: self ? USERAUTH_LOADED : USER_UPDATED,\n      payload: res.data\n    });\n    dispatch(setAlert(`${self ? 'Profile' : 'User'} Successfully Updated`, 'success', '1'));\n    if (!self) history.push('/users-list');\n  } catch (err) {\n    if (err.response.data.errors) {\n      const errors = err.response.data.errors;\n      errors.forEach(error => {\n        dispatch(setAlert(error.msg, 'danger', '1'));\n      });\n      dispatch({\n        type: USERS_ERROR,\n        payload: errors\n      });\n    } else {\n      dispatch(setAlert(err.response.data.msg, 'danger', '1'));\n      dispatch({\n        type: USERS_ERROR,\n        payload: {\n          type: err.response.statusText,\n          status: err.response.status,\n          msg: err.response.data.msg\n        }\n      });\n    }\n  }\n\n  window.scrollTo(0, 0);\n  dispatch(updateLoadingSpinner(false));\n};\nexport const deleteUser = user_id => async dispatch => {\n  dispatch(updateLoadingSpinner(true));\n\n  try {\n    await api.delete(`/user/${user_id}`);\n    dispatch({\n      type: USER_DELETED,\n      payload: user_id\n    });\n    dispatch(setAlert('User Deleted', 'success', '1'));\n  } catch (err) {\n    dispatch(setAlert(err.response.data.msg, 'danger', '1'));\n    dispatch({\n      type: USERS_ERROR,\n      payload: {\n        type: err.response.statusText,\n        status: err.response.status,\n        msg: err.response.data.msg\n      }\n    });\n  }\n\n  window.scrollTo(0, 0);\n  dispatch(updateLoadingSpinner(false));\n};\nexport const clearUser = () => dispatch => {\n  dispatch({\n    type: USER_CLEARED\n  });\n};\nexport const clearUsers = () => dispatch => {\n  dispatch({\n    type: USERS_CLEARED\n  });\n};","map":{"version":3,"sources":["C:/Users/melig/OneDrive/Escritorio/prog/Tahoe-drone backend/client/src/actions/user.js"],"names":["api","history","USER_LOADED","USERAUTH_LOADED","USERS_LOADED","USER_UPDATED","USER_DELETED","USERS_ERROR","USER_CLEARED","USERS_CLEARED","setAlert","updateLoadingSpinner","loadUser","user_id","dispatch","res","get","type","payload","data","err","response","msg","statusText","status","loadUsers","filterData","search","filter","filternames","Object","keys","x","length","name","window","scrollTo","updateUser","formData","self","put","push","errors","forEach","error","deleteUser","delete","clearUser","clearUsers"],"mappings":"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","sourcesContent":["import api from '../utils/api';\r\nimport history from '../utils/history';\r\n\r\nimport {\r\n\tUSER_LOADED,\r\n\tUSERAUTH_LOADED,\r\n\tUSERS_LOADED,\r\n\tUSER_UPDATED,\r\n\tUSER_DELETED,\r\n\tUSERS_ERROR,\r\n\tUSER_CLEARED,\r\n\tUSERS_CLEARED,\r\n} from './types';\r\n\r\nimport { setAlert } from './alert';\r\nimport { updateLoadingSpinner } from './global';\r\n\r\nexport const loadUser = (user_id) => async (dispatch) => {\r\n\tdispatch(updateLoadingSpinner(true));\r\n\ttry {\r\n\t\tconst res = await api.get(`/user/${user_id}`);\r\n\t\tdispatch({\r\n\t\t\ttype: USER_LOADED,\r\n\t\t\tpayload: res.data,\r\n\t\t});\r\n\t} catch (err) {\r\n\t\tdispatch(setAlert(err.response.data.msg, 'danger', '1'));\r\n\t\tdispatch({\r\n\t\t\ttype: USERS_ERROR,\r\n\t\t\tpayload: {\r\n\t\t\t\ttype: err.response.statusText,\r\n\t\t\t\tstatus: err.response.status,\r\n\t\t\t\tmsg: err.response.data.msg,\r\n\t\t\t},\r\n\t\t});\r\n\t}\r\n\tdispatch(updateLoadingSpinner(false));\r\n};\r\n\r\nexport const loadUsers = (filterData, search) => async (dispatch) => {\r\n\tif (!search) dispatch(updateLoadingSpinner(true));\r\n\r\n\tlet filter = '';\r\n\tconst filternames = Object.keys(filterData);\r\n\tfor (let x = 0; x < filternames.length; x++) {\r\n\t\tconst name = filternames[x];\r\n\t\tif (filterData[name] !== '') {\r\n\t\t\tif (filter !== '') filter = filter + '&';\r\n\t\t\tfilter = filter + filternames[x] + '=' + filterData[name];\r\n\t\t}\r\n\t}\r\n\r\n\ttry {\r\n\t\tconst res = await api.get(`/user?${filter}`);\r\n\r\n\t\tdispatch({\r\n\t\t\ttype: USERS_LOADED,\r\n\t\t\tpayload: res.data,\r\n\t\t});\r\n\t} catch (err) {\r\n\t\tif (!search) dispatch(setAlert(err.response.data.msg, 'danger', '1'));\r\n\t\tdispatch({\r\n\t\t\ttype: USERS_ERROR,\r\n\t\t\tpayload: {\r\n\t\t\t\ttype: err.response.statusText,\r\n\t\t\t\tstatus: err.response.status,\r\n\t\t\t\tmsg: err.response.data.msg,\r\n\t\t\t},\r\n\t\t});\r\n\t\twindow.scrollTo(0, 0);\r\n\t}\r\n\r\n\tif (!search) dispatch(updateLoadingSpinner(false));\r\n};\r\n\r\nexport const updateUser = (formData, user_id, self) => async (dispatch) => {\r\n\tdispatch(updateLoadingSpinner(true));\r\n\ttry {\r\n\t\tconst res = await api.put(`/user/${user_id}`, formData);\r\n\r\n\t\tdispatch({\r\n\t\t\ttype: self ? USERAUTH_LOADED : USER_UPDATED,\r\n\t\t\tpayload: res.data,\r\n\t\t});\r\n\r\n\t\tdispatch(\r\n\t\t\tsetAlert(\r\n\t\t\t\t`${self ? 'Profile' : 'User'} Successfully Updated`,\r\n\t\t\t\t'success',\r\n\t\t\t\t'1'\r\n\t\t\t)\r\n\t\t);\r\n\t\tif (!self) history.push('/users-list');\r\n\t} catch (err) {\r\n\t\tif (err.response.data.errors) {\r\n\t\t\tconst errors = err.response.data.errors;\r\n\t\t\terrors.forEach((error) => {\r\n\t\t\t\tdispatch(setAlert(error.msg, 'danger', '1'));\r\n\t\t\t});\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: USERS_ERROR,\r\n\t\t\t\tpayload: errors,\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tdispatch(setAlert(err.response.data.msg, 'danger', '1'));\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: USERS_ERROR,\r\n\t\t\t\tpayload: {\r\n\t\t\t\t\ttype: err.response.statusText,\r\n\t\t\t\t\tstatus: err.response.status,\r\n\t\t\t\t\tmsg: err.response.data.msg,\r\n\t\t\t\t},\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\twindow.scrollTo(0, 0);\r\n\tdispatch(updateLoadingSpinner(false));\r\n};\r\n\r\nexport const deleteUser = (user_id) => async (dispatch) => {\r\n\tdispatch(updateLoadingSpinner(true));\r\n\r\n\ttry {\r\n\t\tawait api.delete(`/user/${user_id}`);\r\n\r\n\t\tdispatch({\r\n\t\t\ttype: USER_DELETED,\r\n\t\t\tpayload: user_id,\r\n\t\t});\r\n\r\n\t\tdispatch(setAlert('User Deleted', 'success', '1'));\r\n\t} catch (err) {\r\n\t\tdispatch(setAlert(err.response.data.msg, 'danger', '1'));\r\n\t\tdispatch({\r\n\t\t\ttype: USERS_ERROR,\r\n\t\t\tpayload: {\r\n\t\t\t\ttype: err.response.statusText,\r\n\t\t\t\tstatus: err.response.status,\r\n\t\t\t\tmsg: err.response.data.msg,\r\n\t\t\t},\r\n\t\t});\r\n\t}\r\n\r\n\twindow.scrollTo(0, 0);\r\n\tdispatch(updateLoadingSpinner(false));\r\n};\r\n\r\nexport const clearUser = () => (dispatch) => {\r\n\tdispatch({ type: USER_CLEARED });\r\n};\r\n\r\nexport const clearUsers = () => (dispatch) => {\r\n\tdispatch({ type: USERS_CLEARED });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}
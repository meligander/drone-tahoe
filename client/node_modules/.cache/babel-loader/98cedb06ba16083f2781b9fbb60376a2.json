{"ast":null,"code":"import api from '../utils/api';\nimport { DAYAVAILABILITY_LOADED, MONTHAVAILABILITY_LOADED, DAY_DISABLED, DAY_ENABLED, DAYSAVAILABILITY_ERROR, DAYSAVAILABILITY_CLEARED } from './types';\nimport { setAlert } from './alert';\nimport { updateLoadingSpinner } from './global';\nexport const checkDayAvailability = (date, job_id) => async dispatch => {\n  dispatch(updateLoadingSpinner(true));\n\n  try {\n    const res = await api.get(`/day/${date}/${job_id}`);\n    dispatch({\n      type: DAYAVAILABILITY_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch(setAlert(err.response.data.msg, 'danger', '1'));\n    dispatch({\n      type: DAYSAVAILABILITY_ERROR,\n      payload: {\n        type: err.response.statusText,\n        status: err.response.status,\n        msg: err.response.data.msg\n      }\n    });\n    window.scrollTo(0, 0);\n  }\n\n  dispatch(updateLoadingSpinner(false));\n};\nexport const checkMonthAvailability = (job_id, month, year) => async dispatch => {\n  dispatch(updateLoadingSpinner(true));\n\n  try {\n    const res = await api.get(`/day/month/${job_id}/${month}/${year}`);\n    dispatch({\n      type: MONTHAVAILABILITY_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch(setAlert(err.response.data.msg, 'danger', '1'));\n    dispatch({\n      type: DAYSAVAILABILITY_ERROR,\n      payload: {\n        type: err.response.statusText,\n        status: err.response.status,\n        msg: err.response.data.msg\n      }\n    });\n    window.scrollTo(0, 0);\n  }\n\n  dispatch(updateLoadingSpinner(false));\n};\nexport const disableDate = date => async dispatch => {\n  dispatch(updateLoadingSpinner(true));\n\n  try {\n    const res = await api.post(`/day/${date}`);\n    dispatch({\n      type: DAY_DISABLED,\n      payload: res.data\n    });\n    dispatch(setAlert('Date successfully disabled', 'success', '1'));\n  } catch (err) {\n    dispatch(setAlert(err.response.data.msg, 'danger', '1'));\n    dispatch({\n      type: DAYSAVAILABILITY_ERROR,\n      payload: {\n        type: err.response.statusText,\n        status: err.response.status,\n        msg: err.response.data.msg\n      }\n    });\n    window.scrollTo(0, 0);\n  }\n\n  window.scrollTo(0, 0);\n  dispatch(updateLoadingSpinner(false));\n};\nexport const enableDate = date => async dispatch => {\n  dispatch(updateLoadingSpinner(true));\n\n  try {\n    const res = await api.delete(`/day/${date}`);\n    dispatch({\n      type: DAY_ENABLED,\n      payload: res.data\n    });\n    dispatch(setAlert('Date successfully enabled', 'success', '1'));\n  } catch (err) {\n    dispatch(setAlert(err.response.data.msg, 'danger', '1'));\n    dispatch({\n      type: DAYSAVAILABILITY_ERROR,\n      payload: {\n        type: err.response.statusText,\n        status: err.response.status,\n        msg: err.response.data.msg\n      }\n    });\n    window.scrollTo(0, 0);\n  }\n\n  window.scrollTo(0, 0);\n  dispatch(updateLoadingSpinner(false));\n};\nexport const clearDaysAvailability = () => dispatch => {\n  dispatch({\n    type: DAYSAVAILABILITY_CLEARED\n  });\n};","map":{"version":3,"sources":["C:/Users/melig/OneDrive/Escritorio/prog/Tahoe-drone backend/client/src/actions/day.js"],"names":["api","DAYAVAILABILITY_LOADED","MONTHAVAILABILITY_LOADED","DAY_DISABLED","DAY_ENABLED","DAYSAVAILABILITY_ERROR","DAYSAVAILABILITY_CLEARED","setAlert","updateLoadingSpinner","checkDayAvailability","date","job_id","dispatch","res","get","type","payload","data","err","response","msg","statusText","status","window","scrollTo","checkMonthAvailability","month","year","disableDate","post","enableDate","delete","clearDaysAvailability"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,cAAhB;AAEA,SACCC,sBADD,EAECC,wBAFD,EAGCC,YAHD,EAICC,WAJD,EAKCC,sBALD,EAMCC,wBAND,QAOO,SAPP;AASA,SAASC,QAAT,QAAyB,SAAzB;AACA,SAASC,oBAAT,QAAqC,UAArC;AAEA,OAAO,MAAMC,oBAAoB,GAAG,CAACC,IAAD,EAAOC,MAAP,KAAkB,MAAOC,QAAP,IAAoB;AACzEA,EAAAA,QAAQ,CAACJ,oBAAoB,CAAC,IAAD,CAArB,CAAR;;AACA,MAAI;AACH,UAAMK,GAAG,GAAG,MAAMb,GAAG,CAACc,GAAJ,CAAS,QAAOJ,IAAK,IAAGC,MAAO,EAA/B,CAAlB;AACAC,IAAAA,QAAQ,CAAC;AACRG,MAAAA,IAAI,EAAEd,sBADE;AAERe,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAFL,KAAD,CAAR;AAIA,GAND,CAME,OAAOC,GAAP,EAAY;AACbN,IAAAA,QAAQ,CAACL,QAAQ,CAACW,GAAG,CAACC,QAAJ,CAAaF,IAAb,CAAkBG,GAAnB,EAAwB,QAAxB,EAAkC,GAAlC,CAAT,CAAR;AACAR,IAAAA,QAAQ,CAAC;AACRG,MAAAA,IAAI,EAAEV,sBADE;AAERW,MAAAA,OAAO,EAAE;AACRD,QAAAA,IAAI,EAAEG,GAAG,CAACC,QAAJ,CAAaE,UADX;AAERC,QAAAA,MAAM,EAAEJ,GAAG,CAACC,QAAJ,CAAaG,MAFb;AAGRF,QAAAA,GAAG,EAAEF,GAAG,CAACC,QAAJ,CAAaF,IAAb,CAAkBG;AAHf;AAFD,KAAD,CAAR;AAQAG,IAAAA,MAAM,CAACC,QAAP,CAAgB,CAAhB,EAAmB,CAAnB;AACA;;AAEDZ,EAAAA,QAAQ,CAACJ,oBAAoB,CAAC,KAAD,CAArB,CAAR;AACA,CAtBM;AAwBP,OAAO,MAAMiB,sBAAsB,GAClC,CAACd,MAAD,EAASe,KAAT,EAAgBC,IAAhB,KAAyB,MAAOf,QAAP,IAAoB;AAC5CA,EAAAA,QAAQ,CAACJ,oBAAoB,CAAC,IAAD,CAArB,CAAR;;AAEA,MAAI;AACH,UAAMK,GAAG,GAAG,MAAMb,GAAG,CAACc,GAAJ,CAAS,cAAaH,MAAO,IAAGe,KAAM,IAAGC,IAAK,EAA9C,CAAlB;AAEAf,IAAAA,QAAQ,CAAC;AACRG,MAAAA,IAAI,EAAEb,wBADE;AAERc,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAFL,KAAD,CAAR;AAIA,GAPD,CAOE,OAAOC,GAAP,EAAY;AACbN,IAAAA,QAAQ,CAACL,QAAQ,CAACW,GAAG,CAACC,QAAJ,CAAaF,IAAb,CAAkBG,GAAnB,EAAwB,QAAxB,EAAkC,GAAlC,CAAT,CAAR;AACAR,IAAAA,QAAQ,CAAC;AACRG,MAAAA,IAAI,EAAEV,sBADE;AAERW,MAAAA,OAAO,EAAE;AACRD,QAAAA,IAAI,EAAEG,GAAG,CAACC,QAAJ,CAAaE,UADX;AAERC,QAAAA,MAAM,EAAEJ,GAAG,CAACC,QAAJ,CAAaG,MAFb;AAGRF,QAAAA,GAAG,EAAEF,GAAG,CAACC,QAAJ,CAAaF,IAAb,CAAkBG;AAHf;AAFD,KAAD,CAAR;AAQAG,IAAAA,MAAM,CAACC,QAAP,CAAgB,CAAhB,EAAmB,CAAnB;AACA;;AAEDZ,EAAAA,QAAQ,CAACJ,oBAAoB,CAAC,KAAD,CAArB,CAAR;AACA,CAzBK;AA2BP,OAAO,MAAMoB,WAAW,GAAIlB,IAAD,IAAU,MAAOE,QAAP,IAAoB;AACxDA,EAAAA,QAAQ,CAACJ,oBAAoB,CAAC,IAAD,CAArB,CAAR;;AAEA,MAAI;AACH,UAAMK,GAAG,GAAG,MAAMb,GAAG,CAAC6B,IAAJ,CAAU,QAAOnB,IAAK,EAAtB,CAAlB;AAEAE,IAAAA,QAAQ,CAAC;AACRG,MAAAA,IAAI,EAAEZ,YADE;AAERa,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAFL,KAAD,CAAR;AAKAL,IAAAA,QAAQ,CAACL,QAAQ,CAAC,4BAAD,EAA+B,SAA/B,EAA0C,GAA1C,CAAT,CAAR;AACA,GATD,CASE,OAAOW,GAAP,EAAY;AACbN,IAAAA,QAAQ,CAACL,QAAQ,CAACW,GAAG,CAACC,QAAJ,CAAaF,IAAb,CAAkBG,GAAnB,EAAwB,QAAxB,EAAkC,GAAlC,CAAT,CAAR;AACAR,IAAAA,QAAQ,CAAC;AACRG,MAAAA,IAAI,EAAEV,sBADE;AAERW,MAAAA,OAAO,EAAE;AACRD,QAAAA,IAAI,EAAEG,GAAG,CAACC,QAAJ,CAAaE,UADX;AAERC,QAAAA,MAAM,EAAEJ,GAAG,CAACC,QAAJ,CAAaG,MAFb;AAGRF,QAAAA,GAAG,EAAEF,GAAG,CAACC,QAAJ,CAAaF,IAAb,CAAkBG;AAHf;AAFD,KAAD,CAAR;AAQAG,IAAAA,MAAM,CAACC,QAAP,CAAgB,CAAhB,EAAmB,CAAnB;AACA;;AAEDD,EAAAA,MAAM,CAACC,QAAP,CAAgB,CAAhB,EAAmB,CAAnB;AACAZ,EAAAA,QAAQ,CAACJ,oBAAoB,CAAC,KAAD,CAArB,CAAR;AACA,CA3BM;AA6BP,OAAO,MAAMsB,UAAU,GAAIpB,IAAD,IAAU,MAAOE,QAAP,IAAoB;AACvDA,EAAAA,QAAQ,CAACJ,oBAAoB,CAAC,IAAD,CAArB,CAAR;;AAEA,MAAI;AACH,UAAMK,GAAG,GAAG,MAAMb,GAAG,CAAC+B,MAAJ,CAAY,QAAOrB,IAAK,EAAxB,CAAlB;AAEAE,IAAAA,QAAQ,CAAC;AACRG,MAAAA,IAAI,EAAEX,WADE;AAERY,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAFL,KAAD,CAAR;AAKAL,IAAAA,QAAQ,CAACL,QAAQ,CAAC,2BAAD,EAA8B,SAA9B,EAAyC,GAAzC,CAAT,CAAR;AACA,GATD,CASE,OAAOW,GAAP,EAAY;AACbN,IAAAA,QAAQ,CAACL,QAAQ,CAACW,GAAG,CAACC,QAAJ,CAAaF,IAAb,CAAkBG,GAAnB,EAAwB,QAAxB,EAAkC,GAAlC,CAAT,CAAR;AACAR,IAAAA,QAAQ,CAAC;AACRG,MAAAA,IAAI,EAAEV,sBADE;AAERW,MAAAA,OAAO,EAAE;AACRD,QAAAA,IAAI,EAAEG,GAAG,CAACC,QAAJ,CAAaE,UADX;AAERC,QAAAA,MAAM,EAAEJ,GAAG,CAACC,QAAJ,CAAaG,MAFb;AAGRF,QAAAA,GAAG,EAAEF,GAAG,CAACC,QAAJ,CAAaF,IAAb,CAAkBG;AAHf;AAFD,KAAD,CAAR;AAQAG,IAAAA,MAAM,CAACC,QAAP,CAAgB,CAAhB,EAAmB,CAAnB;AACA;;AAEDD,EAAAA,MAAM,CAACC,QAAP,CAAgB,CAAhB,EAAmB,CAAnB;AACAZ,EAAAA,QAAQ,CAACJ,oBAAoB,CAAC,KAAD,CAArB,CAAR;AACA,CA3BM;AA6BP,OAAO,MAAMwB,qBAAqB,GAAG,MAAOpB,QAAD,IAAc;AACxDA,EAAAA,QAAQ,CAAC;AAAEG,IAAAA,IAAI,EAAET;AAAR,GAAD,CAAR;AACA,CAFM","sourcesContent":["import api from '../utils/api';\r\n\r\nimport {\r\n\tDAYAVAILABILITY_LOADED,\r\n\tMONTHAVAILABILITY_LOADED,\r\n\tDAY_DISABLED,\r\n\tDAY_ENABLED,\r\n\tDAYSAVAILABILITY_ERROR,\r\n\tDAYSAVAILABILITY_CLEARED,\r\n} from './types';\r\n\r\nimport { setAlert } from './alert';\r\nimport { updateLoadingSpinner } from './global';\r\n\r\nexport const checkDayAvailability = (date, job_id) => async (dispatch) => {\r\n\tdispatch(updateLoadingSpinner(true));\r\n\ttry {\r\n\t\tconst res = await api.get(`/day/${date}/${job_id}`);\r\n\t\tdispatch({\r\n\t\t\ttype: DAYAVAILABILITY_LOADED,\r\n\t\t\tpayload: res.data,\r\n\t\t});\r\n\t} catch (err) {\r\n\t\tdispatch(setAlert(err.response.data.msg, 'danger', '1'));\r\n\t\tdispatch({\r\n\t\t\ttype: DAYSAVAILABILITY_ERROR,\r\n\t\t\tpayload: {\r\n\t\t\t\ttype: err.response.statusText,\r\n\t\t\t\tstatus: err.response.status,\r\n\t\t\t\tmsg: err.response.data.msg,\r\n\t\t\t},\r\n\t\t});\r\n\t\twindow.scrollTo(0, 0);\r\n\t}\r\n\r\n\tdispatch(updateLoadingSpinner(false));\r\n};\r\n\r\nexport const checkMonthAvailability =\r\n\t(job_id, month, year) => async (dispatch) => {\r\n\t\tdispatch(updateLoadingSpinner(true));\r\n\r\n\t\ttry {\r\n\t\t\tconst res = await api.get(`/day/month/${job_id}/${month}/${year}`);\r\n\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: MONTHAVAILABILITY_LOADED,\r\n\t\t\t\tpayload: res.data,\r\n\t\t\t});\r\n\t\t} catch (err) {\r\n\t\t\tdispatch(setAlert(err.response.data.msg, 'danger', '1'));\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: DAYSAVAILABILITY_ERROR,\r\n\t\t\t\tpayload: {\r\n\t\t\t\t\ttype: err.response.statusText,\r\n\t\t\t\t\tstatus: err.response.status,\r\n\t\t\t\t\tmsg: err.response.data.msg,\r\n\t\t\t\t},\r\n\t\t\t});\r\n\t\t\twindow.scrollTo(0, 0);\r\n\t\t}\r\n\r\n\t\tdispatch(updateLoadingSpinner(false));\r\n\t};\r\n\r\nexport const disableDate = (date) => async (dispatch) => {\r\n\tdispatch(updateLoadingSpinner(true));\r\n\r\n\ttry {\r\n\t\tconst res = await api.post(`/day/${date}`);\r\n\r\n\t\tdispatch({\r\n\t\t\ttype: DAY_DISABLED,\r\n\t\t\tpayload: res.data,\r\n\t\t});\r\n\r\n\t\tdispatch(setAlert('Date successfully disabled', 'success', '1'));\r\n\t} catch (err) {\r\n\t\tdispatch(setAlert(err.response.data.msg, 'danger', '1'));\r\n\t\tdispatch({\r\n\t\t\ttype: DAYSAVAILABILITY_ERROR,\r\n\t\t\tpayload: {\r\n\t\t\t\ttype: err.response.statusText,\r\n\t\t\t\tstatus: err.response.status,\r\n\t\t\t\tmsg: err.response.data.msg,\r\n\t\t\t},\r\n\t\t});\r\n\t\twindow.scrollTo(0, 0);\r\n\t}\r\n\r\n\twindow.scrollTo(0, 0);\r\n\tdispatch(updateLoadingSpinner(false));\r\n};\r\n\r\nexport const enableDate = (date) => async (dispatch) => {\r\n\tdispatch(updateLoadingSpinner(true));\r\n\r\n\ttry {\r\n\t\tconst res = await api.delete(`/day/${date}`);\r\n\r\n\t\tdispatch({\r\n\t\t\ttype: DAY_ENABLED,\r\n\t\t\tpayload: res.data,\r\n\t\t});\r\n\r\n\t\tdispatch(setAlert('Date successfully enabled', 'success', '1'));\r\n\t} catch (err) {\r\n\t\tdispatch(setAlert(err.response.data.msg, 'danger', '1'));\r\n\t\tdispatch({\r\n\t\t\ttype: DAYSAVAILABILITY_ERROR,\r\n\t\t\tpayload: {\r\n\t\t\t\ttype: err.response.statusText,\r\n\t\t\t\tstatus: err.response.status,\r\n\t\t\t\tmsg: err.response.data.msg,\r\n\t\t\t},\r\n\t\t});\r\n\t\twindow.scrollTo(0, 0);\r\n\t}\r\n\r\n\twindow.scrollTo(0, 0);\r\n\tdispatch(updateLoadingSpinner(false));\r\n};\r\n\r\nexport const clearDaysAvailability = () => (dispatch) => {\r\n\tdispatch({ type: DAYSAVAILABILITY_CLEARED });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import api from '../utils/api';\nimport history from '../utils/history';\nimport { JOB_LOADED, JOBS_LOADED, JOB_REGISTERED, JOB_UPDATED, JOB_DELETED, JOBS_ERROR, JOBS_CLEARED, JOB_CLEARED } from './types';\nimport { setAlert } from './alert';\nimport { updateLoadingSpinner } from './global';\nexport const loadJob = job_id => async dispatch => {\n  dispatch(updateLoadingSpinner(true));\n\n  try {\n    const res = await api.get(`/job/${job_id}`);\n    dispatch({\n      type: JOB_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: JOBS_ERROR,\n      payload: {\n        type: err.response.statusText,\n        status: err.response.status,\n        msg: err.response.data.msg\n      }\n    });\n    window.scrollTo(0, 0);\n  }\n\n  dispatch(updateLoadingSpinner(false));\n};\nexport const loadJobs = filterData => async dispatch => {\n  dispatch(updateLoadingSpinner(true));\n  let filter = '';\n  const filternames = Object.keys(filterData);\n\n  for (let x = 0; x < filternames.length; x++) {\n    const name = filternames[x];\n\n    if (filterData[name] !== '') {\n      if (filter !== '') filter = filter + '&';\n      filter = filter + filternames[x] + '=' + filterData[name];\n    }\n  }\n\n  try {\n    console.log(filter);\n    const res = await api.get(`/job?${filter}`);\n    dispatch({\n      type: JOBS_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch(setAlert(err.response.data.msg, 'danger', '2'));\n    dispatch({\n      type: JOBS_ERROR,\n      payload: {\n        type: err.response.statusText,\n        status: err.response.status,\n        msg: err.response.data.msg\n      }\n    });\n    window.scrollTo(0, 0);\n  }\n\n  dispatch(updateLoadingSpinner(false));\n};\nexport const registerUpdateJob = (formData, job_id) => async dispatch => {\n  dispatch(updateLoadingSpinner(true));\n\n  try {\n    const res = await api.put(`/job/${job_id ? job_id : '0'}`, formData);\n    dispatch({\n      type: job_id ? JOB_UPDATED : JOB_REGISTERED,\n      payload: res.data\n    });\n    dispatch(setAlert(`Job ${job_id ? 'Updated' : 'Registered'}`, 'success', '2'));\n    history.push('/jobs-list');\n  } catch (err) {\n    if (err.response.data.errors) {\n      const errors = err.response.data.errors;\n      errors.forEach(error => {\n        dispatch(setAlert(error.msg, 'danger', '2'));\n      });\n      dispatch({\n        type: JOBS_ERROR,\n        payload: errors\n      });\n    } else {\n      dispatch(setAlert(err.response.data.msg, 'danger', '2'));\n      dispatch({\n        type: JOBS_ERROR,\n        payload: {\n          type: err.response.statusText,\n          status: err.response.status,\n          msg: err.response.data.msg\n        }\n      });\n    }\n  }\n\n  window.scrollTo(0, 0);\n  dispatch(updateLoadingSpinner(false));\n};\nexport const deleteJob = job_id => async dispatch => {\n  dispatch(updateLoadingSpinner(true));\n\n  try {\n    await api.delete(`/job/${job_id}`);\n    dispatch({\n      type: JOB_DELETED,\n      payload: job_id\n    });\n    dispatch(setAlert('Job Deleted', 'success', '2'));\n  } catch (err) {\n    dispatch(setAlert(err.response.data.msg, 'danger', '2'));\n    dispatch({\n      type: JOBS_ERROR,\n      payload: {\n        type: err.response.statusText,\n        status: err.response.status,\n        msg: err.response.data.msg\n      }\n    });\n  }\n\n  dispatch(updateLoadingSpinner(false));\n};\nexport const clearJobs = () => dispatch => {\n  dispatch({\n    type: JOBS_CLEARED\n  });\n};\nexport const clearJob = () => dispatch => {\n  dispatch({\n    type: JOB_CLEARED\n  });\n};","map":{"version":3,"sources":["C:/Users/melig/OneDrive/Escritorio/prog/Tahoe-drone backend/client/src/actions/jobs.js"],"names":["api","history","JOB_LOADED","JOBS_LOADED","JOB_REGISTERED","JOB_UPDATED","JOB_DELETED","JOBS_ERROR","JOBS_CLEARED","JOB_CLEARED","setAlert","updateLoadingSpinner","loadJob","job_id","dispatch","res","get","type","payload","data","err","response","statusText","status","msg","window","scrollTo","loadJobs","filterData","filter","filternames","Object","keys","x","length","name","console","log","registerUpdateJob","formData","put","push","errors","forEach","error","deleteJob","delete","clearJobs","clearJob"],"mappings":"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","sourcesContent":["import api from '../utils/api';\r\nimport history from '../utils/history';\r\n\r\nimport {\r\n\tJOB_LOADED,\r\n\tJOBS_LOADED,\r\n\tJOB_REGISTERED,\r\n\tJOB_UPDATED,\r\n\tJOB_DELETED,\r\n\tJOBS_ERROR,\r\n\tJOBS_CLEARED,\r\n\tJOB_CLEARED,\r\n} from './types';\r\n\r\nimport { setAlert } from './alert';\r\nimport { updateLoadingSpinner } from './global';\r\n\r\nexport const loadJob = (job_id) => async (dispatch) => {\r\n\tdispatch(updateLoadingSpinner(true));\r\n\r\n\ttry {\r\n\t\tconst res = await api.get(`/job/${job_id}`);\r\n\r\n\t\tdispatch({\r\n\t\t\ttype: JOB_LOADED,\r\n\t\t\tpayload: res.data,\r\n\t\t});\r\n\t} catch (err) {\r\n\t\tdispatch({\r\n\t\t\ttype: JOBS_ERROR,\r\n\t\t\tpayload: {\r\n\t\t\t\ttype: err.response.statusText,\r\n\t\t\t\tstatus: err.response.status,\r\n\t\t\t\tmsg: err.response.data.msg,\r\n\t\t\t},\r\n\t\t});\r\n\t\twindow.scrollTo(0, 0);\r\n\t}\r\n\r\n\tdispatch(updateLoadingSpinner(false));\r\n};\r\n\r\nexport const loadJobs = (filterData) => async (dispatch) => {\r\n\tdispatch(updateLoadingSpinner(true));\r\n\r\n\tlet filter = '';\r\n\tconst filternames = Object.keys(filterData);\r\n\tfor (let x = 0; x < filternames.length; x++) {\r\n\t\tconst name = filternames[x];\r\n\t\tif (filterData[name] !== '') {\r\n\t\t\tif (filter !== '') filter = filter + '&';\r\n\t\t\tfilter = filter + filternames[x] + '=' + filterData[name];\r\n\t\t}\r\n\t}\r\n\r\n\ttry {\r\n\t\tconsole.log(filter);\r\n\t\tconst res = await api.get(`/job?${filter}`);\r\n\r\n\t\tdispatch({\r\n\t\t\ttype: JOBS_LOADED,\r\n\t\t\tpayload: res.data,\r\n\t\t});\r\n\t} catch (err) {\r\n\t\tdispatch(setAlert(err.response.data.msg, 'danger', '2'));\r\n\t\tdispatch({\r\n\t\t\ttype: JOBS_ERROR,\r\n\t\t\tpayload: {\r\n\t\t\t\ttype: err.response.statusText,\r\n\t\t\t\tstatus: err.response.status,\r\n\t\t\t\tmsg: err.response.data.msg,\r\n\t\t\t},\r\n\t\t});\r\n\t\twindow.scrollTo(0, 0);\r\n\t}\r\n\r\n\tdispatch(updateLoadingSpinner(false));\r\n};\r\n\r\nexport const registerUpdateJob = (formData, job_id) => async (dispatch) => {\r\n\tdispatch(updateLoadingSpinner(true));\r\n\r\n\ttry {\r\n\t\tconst res = await api.put(`/job/${job_id ? job_id : '0'}`, formData);\r\n\r\n\t\tdispatch({\r\n\t\t\ttype: job_id ? JOB_UPDATED : JOB_REGISTERED,\r\n\t\t\tpayload: res.data,\r\n\t\t});\r\n\r\n\t\tdispatch(\r\n\t\t\tsetAlert(`Job ${job_id ? 'Updated' : 'Registered'}`, 'success', '2')\r\n\t\t);\r\n\t\thistory.push('/jobs-list');\r\n\t} catch (err) {\r\n\t\tif (err.response.data.errors) {\r\n\t\t\tconst errors = err.response.data.errors;\r\n\t\t\terrors.forEach((error) => {\r\n\t\t\t\tdispatch(setAlert(error.msg, 'danger', '2'));\r\n\t\t\t});\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: JOBS_ERROR,\r\n\t\t\t\tpayload: errors,\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tdispatch(setAlert(err.response.data.msg, 'danger', '2'));\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: JOBS_ERROR,\r\n\t\t\t\tpayload: {\r\n\t\t\t\t\ttype: err.response.statusText,\r\n\t\t\t\t\tstatus: err.response.status,\r\n\t\t\t\t\tmsg: err.response.data.msg,\r\n\t\t\t\t},\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\twindow.scrollTo(0, 0);\r\n\tdispatch(updateLoadingSpinner(false));\r\n};\r\n\r\nexport const deleteJob = (job_id) => async (dispatch) => {\r\n\tdispatch(updateLoadingSpinner(true));\r\n\r\n\ttry {\r\n\t\tawait api.delete(`/job/${job_id}`);\r\n\r\n\t\tdispatch({\r\n\t\t\ttype: JOB_DELETED,\r\n\t\t\tpayload: job_id,\r\n\t\t});\r\n\r\n\t\tdispatch(setAlert('Job Deleted', 'success', '2'));\r\n\t} catch (err) {\r\n\t\tdispatch(setAlert(err.response.data.msg, 'danger', '2'));\r\n\t\tdispatch({\r\n\t\t\ttype: JOBS_ERROR,\r\n\t\t\tpayload: {\r\n\t\t\t\ttype: err.response.statusText,\r\n\t\t\t\tstatus: err.response.status,\r\n\t\t\t\tmsg: err.response.data.msg,\r\n\t\t\t},\r\n\t\t});\r\n\t}\r\n\r\n\tdispatch(updateLoadingSpinner(false));\r\n};\r\n\r\nexport const clearJobs = () => (dispatch) => {\r\n\tdispatch({ type: JOBS_CLEARED });\r\n};\r\n\r\nexport const clearJob = () => (dispatch) => {\r\n\tdispatch({ type: JOB_CLEARED });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}